module Sherlock
  module Malware
    module MacOS
      module DeCompiled
        class << self

          # TODO get bad calls from the SmLoginItemSetEnabled API,
          # this API is even stealthier, login items dont install in Sys Prefs


          # Checks if decompiled/source code perists as login item
          def login_item(file)
            # CFURLCreateFromFileSystemRepresentation -> builds path to add to Login Items list
            # ^ On the fence about including this because I'm not sure how often legitimate apps use this call
            # LSSharedFileListCreate -> return list of existing login items
            # LSSharedFileListInsertItemURL -> Adds application to list of login items
            bad_strings = %q(LSSharedFileListCreate LSSharedFileListInsertItemURL)

            read_and_scan file do |line|
              if line.include? bad_strings
                puts "Potential Login Item persistence found at #{file}:\n"
                puts "#{line}"
              end
            end
          end # end login_item_persistence

          # Login daemons are non-interactive and start before user login, run as root
          def login_daemon(file)
            daemon_dir = %q(/Library/LaunchDaemons)
            read_and_scan file do |line|
              if line.include? daemon_dir
                puts "Potential LaunchDaemon persistence found: #{file}"
                puts line
              end
            end
          end

          # launch agents run @ login, w user permissions and interact with user sessions
          def launch_agent(file)
            launch_agent_dirs = %q(/Library/LaunchAgents ~/Library/LaunchAgents)
            read_and_scan file do |line|
              if line.include? launch_agent_dirs
                puts "Potential Launch Agent Persistence Detected #{file}:"
                puts line
              end
            end
          end

          # TODO find more cron_job, job peristence methods

          # cron job == task scheduled at regular interval
          def cron_jobs(file)
            cron = "crontab"
            read_and_scan file do |line|
              if line.include? cron
                puts "Potential crontab detected #{file}:"
                puts line
              end
            end
          end

          def jobs?(f) # make every method look like this, boolean, conscise and short
            # Currently no malware makes use of the /bin/at and /etc/periodic utilities to persist
            # I hestistate to scan for at as a ware because it is pretty common
            # find out how to add script to periodic, then look for methods
            # Do normla apps invoke bash or python or are only malware authors doing this
            bad = %q(launctl atrun.plist)
            read_and_scan f do |l|
              puts "Job persistence detected: #{file}"; puts line  if l.include? bad
            end
          end

          def hooks(f)
            hooks = %q(LoginHook LogoutHook ~/Library/Preferences/com.apple.loginwindow.plist)
            read_and_scan f do |l|
              puts "Login || Logout Hook discover #{file}:"; puts line if l.include? hooks
            end
          end

          def run_at_load?(plist)
            # dig might not be the best method, going to have to convert all plist data to JSON
            # k[RunAtLoad] = true == persistence
            # Dealing with XML is a hassle
            plist.dig("RunAtLoad") == true
          end

          def read_and_scan(file, &block)
            File.foreach(file) do |line|
              yield line # todo fix block,test
            end
          end

          def read_plist_as_json(file, &block)
            d = JSON.parse(system("plutil", "-p", "-convert json"))
            yield if block_given?
          end

        end
      end
    end
  end
end
